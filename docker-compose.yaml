services:
  file-api:
    build:
      context: ./files_storage
      dockerfile: ./Dockerfile
    volumes:
      - "./fs:/app/fs"  # Для хранения файлов
    ports:
      - "8083:8000"

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sound_db
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d sound_db"]
      interval: 5s
      retries: 5
      timeout: 3s

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8081:8080"

  db_init:
    image: postgres:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      PGPASSWORD: password
    entrypoint: ["/bin/sh", "-c", "sleep 5 && psql -h postgres -U user -d sound_db -f /docker-entrypoint-initdb.d/init.sql"]
    restart: "no"

  db-api:
    build:
      context: .
      dockerfile: ./database/Dockerfile
    restart: always
    depends_on:
      db_init:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: sound_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    ports:
      - "8082:8000"

  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    restart: always
    environment:
      DB_API_URL: "http://db-api:8082"
    depends_on:
      db_init:
        condition: service_completed_successfully
    ports:
      - "8080:8000"

volumes:
  postgres_data:
    driver: local