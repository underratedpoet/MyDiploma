services:
  file-api:
    build:
      context: ./files_storage
      dockerfile: ./Dockerfile
    volumes:
      - "./fs:/app/fs"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    ports:
      - "8083:8000"

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sound_db
      ADMINER_DESIGN: 'pepa-linha' 
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d sound_db"]
      interval: 5s
      retries: 5
      timeout: 3s

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8081:8080"

  db_init:
    image: postgres:latest
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      PGPASSWORD: password
    entrypoint: ["/bin/sh", "-c", "sleep 5 && psql -h postgres -U user -d sound_db -f /docker-entrypoint-initdb.d/init.sql"]
    restart: "no"

  db-api:
    build:
      context: .
      dockerfile: ./database/Dockerfile
    restart: always
    depends_on:
      db_init:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: sound_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432

  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    restart: always
    environment:
      DB_API_URL: "http://db-api:8000"
      FILE_API_URL: "http://file-api:8000"
      SECRET_KEY: "supersecretkey"
      FRONTEND_URL: "http://localhost:8080"
      #SMTP_HOST: mailhog
      #SMTP_PORT: 1025
      #FROM_EMAIL: your_email@example.com
      #REDIS_URL: "redis://redis:6379"
      MONGO_URI: mongodb://mongo:27017
      MONGO_DB: test_db
    depends_on:
      db_init:
        condition: service_completed_successfully
    ports:
      - "8080:8000"

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

#  mailhog:
#    image: mailhog/mailhog
#    ports:
#      - "1025:1025"
#      - "8025:8025"

#  redis:
#    image: redis:latest
#    container_name: redis
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data

  #ml-anomaly-collector:
  #  build:
  #    context: ./ml-anomaly-detector
  #    dockerfile: Dockerfile
  #  volumes:
  #    - anomaly_data:/app/data  # üìÇ —Å–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Å—é–¥–∞
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  command: ["python", "-u", "auto_collect.py"]
  #  restart: "no"

  #ml-anomaly-trainer:
  #  build:
  #    context: ./ml-anomaly-detector
  #    dockerfile: Dockerfile
  #  volumes:
  #    - anomaly_data:/app/data  # üìÇ —á–∏—Ç–∞–µ–º CSV –æ—Ç—Å—é–¥–∞
  #  depends_on:
  #    ml-anomaly-collector:
  #      condition: service_completed_successfully
  #  command: ["python", "-u", "auto_train.py"]
  #  restart: "no"

  #ml-anomaly-detector:
  #  build:
  #    context: ./ml-anomaly-detector
  #    dockerfile: Dockerfile
  #  #depends_on:
  #  #  ml-anomaly-trainer:
  #  #    condition: service_completed_successfully
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock
  #    - anomaly_data:/app/data  # üîÑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á–∏—Ç–∞–µ–º –º–æ–¥–µ–ª—å
  #  ports:
  #    - "8090:8000"
  #  restart: always

  admin-back:
    build: ./admin_panel/back
    ports:
      - "5000:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=tcp://host.docker.internal:2375
    env_file:
      - .env

  admin-front:
    build: ./admin_panel/front
    ports:
      - "3000:80"
    depends_on:
      - admin-back

volumes:
  postgres_data:
    driver: local
  mongo_data:
  #anomaly_data: